#@IgnoreInspection BashAddShebang
#
# My ZSH theme
#
# Features:
#  * tracking current paths and commands in terminal title
#  * cursor on own line (with no RHS) for easy copying
#  * git info: branch, time since last commit, commit message, tracked/untracked, ahead/behind
#  * async git info since all of that takes a long time

# Use extended color pallete if available.
if [[ ${TERM} = *256color* || ${TERM} = *rxvt* ]]; then
   _prompt_thelm_colors=(
    "%F{81}"  # Turquoise
    "%F{166}" # Orange
    "%F{135}" # Purple
    "%F{161}" # Hotpink
    "%F{118}" # Limegreen
  )
else
   _prompt_thelm_colors=(
    "%F{cyan}"
    "%F{yellow}"
    "%F{magenta}"
    "%F{red}"
    "%F{green}"
  )
fi

_prompt_thelm_git_global=''
_prompt_thelm_current_git_root_global=''


# returns the time by given seconds
time_since_commit() {
  local seconds_since_last_commit=$(($1 + 0))

  # totals
  local MINUTES=$((seconds_since_last_commit / 60))
  local HOURS=$((seconds_since_last_commit/3600))

  # sub-hours and sub-minutes
  local DAYS=$((seconds_since_last_commit / 86400))
  local SUB_HOURS=$((HOURS % 24))
  local SUB_MINUTES=$((MINUTES % 60))

  if [ "$HOURS" -gt 24 ]; then
    echo "${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m"
  elif [ "$MINUTES" -gt 60 ]; then
    echo "${HOURS}h${SUB_MINUTES}m"
  else
    echo "${MINUTES}m"
  fi
}

### git: Show marker (T) if there are untracked files in repository
# Make sure you have added staged to your 'formats':  %c
function +vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | fgrep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[unstaged]+="%B%F{magenta}?%f%b"
    fi
}

### git: Show +N/-N when your local branch is ahead-of or behind remote HEAD.
# Make sure you have added misc to your 'formats':  %m
function +vi-git-aheadbehind() {
    local ahead behind
    local -a gitstatus

    # for git prior to 1.7
    # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
    ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l | tr -d ' ')
    (( $ahead )) && gitstatus+=( "%B%F{green}+${ahead}%f%b" )

    # for git prior to 1.7
    # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
    behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l | tr -d ' ')
    (( $behind )) && gitstatus+=( "%B%F{red}-${behind}%f%b" )


    # get the last commit hash
    # lc_hash=$(git log --pretty=format:'%h' -1 2> /dev/null)
    # get the last commit time
    local lc_time=$(git log --pretty=format:'%at' -1 2> /dev/null)
    local now=$(date +%s)
    local seconds_since_last_commit=$((now-lc_time))
    local lc_time_since=$(time_since_commit ${seconds_since_last_commit})
    local last_commit=$(git log -1 --pretty=%B | head -n1)

    hook_com[misc]+=${(j::)gitstatus}
    hook_com[misc]+=" ${_prompt_thelm_colors[4]}$lc_time_since%F{white} $last_commit"
}

### git: Show remote branch name for remote-tracking branches
# Make sure you have added staged to your 'formats':  %b
function +vi-git-remotebranch() {
    local remote

    # Are we on a remote-tracking branch?
    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
        --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

    # The first test will show a tracking branch whenever there is one. The
    # second test, however, will only show the remote branch's name if it
    # differs from the local one.
    #if [[ -n ${remote} ]] ; then
    if [[ -n ${remote} && ${remote#*/} != ${hook_com[branch]} ]] ; then
        hook_com[branch]="${hook_com[branch]}(%F{cyan}${remote}%f)"
    fi
}


function prompt_thelm_async_callback() {
  case $1 in
    prompt_thelm_async_git)
      _prompt_thelm_git_global=$3
      zle && zle reset-prompt
      ;;
  esac
}

function prompt_thelm_async_git() {
  cd -q "$1"
  vcs_info
  print ${vcs_info_msg_0_}
}

prompt_thelm_async_setup () {
  if (( !${prompt_prezto_async_init:-0} )); then
    async_start_worker prompt_thelm -n
    async_register_callback prompt_thelm prompt_thelm_async_callback
    typeset -g prompt_prezto_async_init=1
  fi

  # Kill the old process of slow commands if it is still running.
  async_flush_jobs prompt_thelm

  # Compute slow commands in the background.
  async_job prompt_thelm prompt_thelm_async_git "$PWD"
}

prompt_thelm_precmd() {
  print -Pn "\e]0;%m:%~\a" # current directory in terminal title
  print # blank line before prompt (or after a command finishes)

  #
  # vcs_info is expensive: here we reset our prompt's git info
  # on each git root dir change, calculating the git info as an
  # async_job
  #
  if $(git rev-parse --git-dir > /dev/null 2>&1); then
    local new_git_root="prefix$(git rev-parse --show-toplevel)" #prefix so we don't leak the current dir for aliasing
    if [[ ${new_git_root} != $_prompt_thelm_current_git_root_global ]]; then
      _prompt_thelm_git_global=''
      _prompt_thelm_current_git_root_global=${new_git_root}
    fi
    prompt_thelm_async_setup
  else
    _prompt_thelm_git_global=''
    _prompt_thelm_current_git_root_global=''
  fi
}

prompt_thelm_preexec() {
  print -Pn "\e]0;%m:%~ $ $1\a" # current command in terminal title
  print # blank line before executing a command
}


prompt_thelm_setup() {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info
  autoload -Uz async && async

  add-zsh-hook precmd prompt_thelm_precmd
  add-zsh-hook preexec prompt_thelm_preexec

  local _s="%F{white}|" #separator
  local _cr='%F{white}' #reset color
  local _cb=${_prompt_thelm_colors[1]} # branch color
  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:*' stagedstr     "%B%F{green}$%f${_cb}%b${_cr}"
  zstyle ':vcs_info:*' unstagedstr   "%B%F{yellow}%%%f${_cb}%b${_cr}"
  zstyle ':vcs_info:*' formats       "${_s} %c%u${_cb}%b${_cr}%m "
  zstyle ':vcs_info:*' actionformats "%c%u%b%m %B%s-%a%${_cb}%b${_cr} "
  zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-aheadbehind git-remotebranch

  # Set python-info parameters.
  zstyle ':prezto:module:python:info:virtualenv' format '(%v)'

  local names="${_prompt_thelm_colors[3]}%n%f@${_prompt_thelm_colors[2]}%m"
  local datetime="%w %D{%H:%M:%S}"
  local path="${_prompt_thelm_colors[5]}%~"

  PROMPT="${names} ${_s} ${datetime} ${_s} ${path} "'${_prompt_thelm_git_global}'"
%F{white}$ "
}

prompt_thelm_setup "$@"



