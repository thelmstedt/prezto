#
# A ZSH theme based on a combination of the skwp prezto theme and the robl ohmyzsh theme.
#  * RVM info shown on the right
#  * Git branch info on the left
#  * Single line prompt
#  * Time since last commit on the left
#  * Time in place of user@hostname
#
# Authors:
#   David Rice <me@davidjrice.co.uk>

ZSH_THEME_REP_TIME_SINCE_COMMIT_SHORT="%{$fg[green]%}"
ZSH_THEME_REP_TIME_SINCE_COMMIT_MEDIUM="%{$fg[yellow]%}"
ZSH_THEME_REP_TIME_SINCE_COMMIT_LONG="%{$fg[red]%}"
ZSH_THEME_REP_TIME_SINCE_COMMIT_NEUTRAL="%{$fg[cyan]%}"

# returns the time since last git commit
git_last_commit_details() {
  # only proceed if there is actually a git repository
  if $(git rev-parse --git-dir > /dev/null 2>&1); then
    # only proceed if there is actually a commit
    if [[ $(git log 2>&1 > /dev/null | grep -c "^fatal: bad default revision") == 0 ]]; then
      # get the last commit hash
      # lc_hash=$(git log --pretty=format:'%h' -1 2> /dev/null)
      # get the last commit time
      lc_time=$(git log --pretty=format:'%at' -1 2> /dev/null)

      now=$(date +%s)
      seconds_since_last_commit=$((now-lc_time))
      lc_time_since=$(time_since_commit ${seconds_since_last_commit})
      _pwd=$(pwd)
      n_pwd=${#_pwd}
      n_vcs=${#vcs_info_msg_0_}
      num=$(($COLUMNS - $n_pwd - $n_vcs - 20 ))
      num_1=$((num + 1))
      last_commit=$(git log -1 --pretty=%B | head -n1 | awk "length > $num{\$0=substr(\$0,0,$num_1)\" ...\"}1")
      echo "| ${_prompt_thelm_colors[1]}$vcs_info_msg_0_%F{white} (${_prompt_thelm_colors[4]}$lc_time_since%F{white} $last_commit)"
    else
      echo ""
    fi
  else
    echo ""
  fi
}

# returns the time by given seconds
time_since_commit() {
  seconds_since_last_commit=$(($1 + 0))

  # totals
  MINUTES=$((seconds_since_last_commit / 60))
  HOURS=$((seconds_since_last_commit/3600))

  # sub-hours and sub-minutes
  DAYS=$((seconds_since_last_commit / 86400))
  SUB_HOURS=$((HOURS % 24))
  SUB_MINUTES=$((MINUTES % 60))

  if [ "$HOURS" -gt 24 ]; then
    echo "${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m"
  elif [ "$MINUTES" -gt 60 ]; then
    echo "${HOURS}h${SUB_MINUTES}m"
  else
    echo "${MINUTES}m"
  fi
}

prompt_thelm_precmd() {
  # Check for untracked files or updated submodules since vcs_info doesn't.
  if [[ ! -z $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    fmt_branch="%b%u%c${__PROMPT_SKWP_COLORS[4]}●%f"
  else
    fmt_branch="%b%u%c"
  fi
  zstyle ':vcs_info:*:prompt:*' formats "${fmt_branch}"

  vcs_info 'prompt'

  if (( $+functions[python-info] )); then
    python-info
  fi
  echo
}

prompt_thelm_preexec() {
  echo
}

prompt_thelm_setup() {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  add-zsh-hook precmd prompt_thelm_precmd
  add-zsh-hook preexec prompt_thelm_preexec

  # Use extended color pallete if available.
  if [[ ${TERM} = *256color* || ${TERM} = *rxvt* ]]; then
    __PROMPT_SKWP_COLORS=(
      "%F{81}"  # turquoise
      "%F{166}" # orange
      "%F{135}" # purple
      "%F{161}" # hotpink
      "%F{118}" # limegreen
    )
     _prompt_thelm_colors=(
      "%F{81}"  # Turquoise
      "%F{166}" # Orange
      "%F{135}" # Purple
      "%F{161}" # Hotpink
      "%F{118}" # Limegreen
    )
  else
    __PROMPT_SKWP_COLORS=(
      "%F{cyan}"
      "%F{yellow}"
      "%F{magenta}"
      "%F{red}"
      "%F{green}"
    )
     _prompt_thelm_colors=(
      "%F{cyan}"
      "%F{yellow}"
      "%F{magenta}"
      "%F{red}"
      "%F{green}"
    )
  fi

  # Enable VCS systems you use.
  zstyle ':vcs_info:*' enable bzr git hg svn

  # check-for-changes can be really slow.
  # You should disable it if you work with large repositories.
  zstyle ':vcs_info:*:prompt:*' check-for-changes true

  # Formats:
  # %b - branchname
  # %u - unstagedstr (see below)
  # %c - stagedstr (see below)
  # %a - action (e.g. rebase-i)
  # %R - repository path
  # %S - path in the repository
  # %n - user
  # %m - machine hostname

  # local fmt_branch="(${__PROMPT_SKWP_COLORS[1]}%b%f%u%c)"
  local fmt_branch="${__PROMPT_SKWP_COLORS[2]}%b%f%u%c"
  local fmt_action="${__PROMPT_SKWP_COLORS[5]}%a%f"
  local fmt_unstaged="${__PROMPT_SKWP_COLORS[2]}●%f"
  local fmt_staged="${__PROMPT_SKWP_COLORS[5]}●%f"

  zstyle ':vcs_info:*:prompt:*' unstagedstr   "${fmt_unstaged}"
  zstyle ':vcs_info:*:prompt:*' stagedstr     "${fmt_staged}"
  zstyle ':vcs_info:*:prompt:*' actionformats "${fmt_branch}${fmt_action}"
  zstyle ':vcs_info:*:prompt:*' formats       "${fmt_branch}"
  zstyle ':vcs_info:*:prompt:*' nvcsformats   ""

  # Set python-info parameters.
  zstyle ':prezto:module:python:info:virtualenv' format '(%v)'


  THELM_SEPARATOR="|"
  THELM_R_SEPARATOR=""

  THELM_LEFT_A="${_prompt_thelm_colors[3]}"'%n%f@${_prompt_thelm_colors[2]}%m %F{white}'${THELM_SEPARATOR}
  THELM_LEFT_B="${_prompt_thelm_colors[5]} %~ "'$python_info[virtualenv]'"%F{white}"
  THELM_LEFT_C='$(git_last_commit_details)'

  local _newline=$'\n'
  local _lineup=$'\e[1A'
  local _linedown=$'\e[1B'

  PROMPT="${THELM_LEFT_A}${THELM_LEFT_B}${THELM_LEFT_C}${_newline}$ "


  RPROMPT=%{${_lineup}%}${THELM_R_SEPARATOR}'xxx'%{${_linedown}%}
}

prompt_thelm_setup "$@"



